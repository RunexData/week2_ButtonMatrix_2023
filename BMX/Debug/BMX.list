
BMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c78  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e90  08002e90  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e98  08002e98  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08002ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000004c  08002eec  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002eec  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be82  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001acc  00000000  00000000  0002bf41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0002da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071b  00000000  00000000  0002e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023efa  00000000  00000000  0002ea6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb22  00000000  00000000  00052965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5907  00000000  00000000  0005e487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002508  00000000  00000000  00143d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00146298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000004c 	.word	0x2000004c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002e38 	.word	0x08002e38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000050 	.word	0x20000050
 8000214:	08002e38 	.word	0x08002e38

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fad1 	bl	8000abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f816 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8aa 	bl	8000678 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f85e 	bl	80005e4 <MX_LPUART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 static uint32_t BTMX_TimeStamp = 0;
	 if(HAL_GetTick() > BTMX_TimeStamp)
 8000528:	f000 fb2e 	bl	8000b88 <HAL_GetTick>
 800052c:	4602      	mov	r2, r0
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <main+0x34>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	429a      	cmp	r2, r3
 8000534:	d9f8      	bls.n	8000528 <main+0x14>
	 {
		 BTMX_TimeStamp = HAL_GetTick() + 25; //next scan in 25 ms
 8000536:	f000 fb27 	bl	8000b88 <HAL_GetTick>
 800053a:	4603      	mov	r3, r0
 800053c:	3319      	adds	r3, #25
 800053e:	4a02      	ldr	r2, [pc, #8]	; (8000548 <main+0x34>)
 8000540:	6013      	str	r3, [r2, #0]
		 ButtonMatrixRead();
 8000542:	f000 f955 	bl	80007f0 <ButtonMatrixRead>
  {
 8000546:	e7ef      	b.n	8000528 <main+0x14>
 8000548:	200000fc 	.word	0x200000fc

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2238      	movs	r2, #56	; 0x38
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fc40 	bl	8002de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fdfc 	bl	800116c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2340      	movs	r3, #64	; 0x40
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800058a:	2304      	movs	r3, #4
 800058c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800058e:	2355      	movs	r3, #85	; 0x55
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fe96 	bl	80012d4 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ae:	f000 f997 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f99a 	bl	8001904 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005d6:	f000 f983 	bl	80008e0 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 80005ea:	4a22      	ldr	r2, [pc, #136]	; (8000674 <MX_LPUART1_UART_Init+0x90>)
 80005ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000626:	4812      	ldr	r0, [pc, #72]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 8000628:	f001 fdd6 	bl	80021d8 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f955 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000636:	2100      	movs	r1, #0
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 800063a:	f002 fb07 	bl	8002c4c <HAL_UARTEx_SetTxFifoThreshold>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000644:	f000 f94c 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	4809      	ldr	r0, [pc, #36]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 800064c:	f002 fb3c 	bl	8002cc8 <HAL_UARTEx_SetRxFifoThreshold>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000656:	f000 f943 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_LPUART1_UART_Init+0x8c>)
 800065c:	f002 fabd 	bl	8002bda <HAL_UARTEx_DisableFifoMode>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000666:	f000 f93b 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000068 	.word	0x20000068
 8000674:	40008000 	.word	0x40008000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b55      	ldr	r3, [pc, #340]	; (80007e4 <MX_GPIO_Init+0x16c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a54      	ldr	r2, [pc, #336]	; (80007e4 <MX_GPIO_Init+0x16c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b52      	ldr	r3, [pc, #328]	; (80007e4 <MX_GPIO_Init+0x16c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	4b4f      	ldr	r3, [pc, #316]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a4e      	ldr	r2, [pc, #312]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b4c      	ldr	r3, [pc, #304]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b49      	ldr	r3, [pc, #292]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a48      	ldr	r2, [pc, #288]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b46      	ldr	r3, [pc, #280]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b43      	ldr	r3, [pc, #268]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a42      	ldr	r2, [pc, #264]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <MX_GPIO_Init+0x16c>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f000 fcfc 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000702:	4839      	ldr	r0, [pc, #228]	; (80007e8 <MX_GPIO_Init+0x170>)
 8000704:	f000 fcf6 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4833      	ldr	r0, [pc, #204]	; (80007ec <MX_GPIO_Init+0x174>)
 8000720:	f000 fb4e 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000724:	2320      	movs	r3, #32
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f000 fb3f 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000742:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074c:	2301      	movs	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f000 fb31 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 800075e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000764:	2311      	movs	r3, #17
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <MX_GPIO_Init+0x170>)
 8000778:	f000 fb22 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000784:	2301      	movs	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4817      	ldr	r0, [pc, #92]	; (80007ec <MX_GPIO_Init+0x174>)
 8000790:	f000 fb16 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800079a:	2311      	movs	r3, #17
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f000 fb06 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007b4:	2340      	movs	r3, #64	; 0x40
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007bc:	2301      	movs	r3, #1
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <MX_GPIO_Init+0x170>)
 80007c8:	f000 fafa 	bl	8000dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2028      	movs	r0, #40	; 0x28
 80007d2:	f000 fac0 	bl	8000d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007d6:	2028      	movs	r0, #40	; 0x28
 80007d8:	f000 fad7 	bl	8000d8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000400 	.word	0x48000400
 80007ec:	48000800 	.word	0x48000800

080007f0 <ButtonMatrixRead>:

/* USER CODE BEGIN 4 */
void ButtonMatrixRead(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	static uint8_t X=0;
	for(int i=0; i<4; i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	e037      	b.n	800086c <ButtonMatrixRead+0x7c>
	{
		if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 80007fc:	4a34      	ldr	r2, [pc, #208]	; (80008d0 <ButtonMatrixRead+0xe0>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000804:	4932      	ldr	r1, [pc, #200]	; (80008d0 <ButtonMatrixRead+0xe0>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	889b      	ldrh	r3, [r3, #4]
 800080e:	4619      	mov	r1, r3
 8000810:	4610      	mov	r0, r2
 8000812:	f000 fc57 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d111      	bne.n	8000840 <ButtonMatrixRead+0x50>
		{ //ปุ่มถู�?�?ด
			ButtonState |= 1 << (i + (X * 4));
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <ButtonMatrixRead+0xe4>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	009a      	lsls	r2, r3, #2
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	2201      	movs	r2, #1
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	b21a      	sxth	r2, r3
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <ButtonMatrixRead+0xe8>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b21b      	sxth	r3, r3
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <ButtonMatrixRead+0xe8>)
 800083c:	801a      	strh	r2, [r3, #0]
 800083e:	e012      	b.n	8000866 <ButtonMatrixRead+0x76>
		}
		else
		{
			ButtonState &= ~(1 << (i + (X * 4)));
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <ButtonMatrixRead+0xe4>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	009a      	lsls	r2, r3, #2
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	2201      	movs	r2, #1
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	b21b      	sxth	r3, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	b21a      	sxth	r2, r3
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <ButtonMatrixRead+0xe8>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b21b      	sxth	r3, r3
 800085c:	4013      	ands	r3, r2
 800085e:	b21b      	sxth	r3, r3
 8000860:	b29a      	uxth	r2, r3
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <ButtonMatrixRead+0xe8>)
 8000864:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<4; i++)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3301      	adds	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b03      	cmp	r3, #3
 8000870:	ddc4      	ble.n	80007fc <ButtonMatrixRead+0xc>
		}
	}
	//set currentL to Hi-z (open drain)
	HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <ButtonMatrixRead+0xe4>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <ButtonMatrixRead+0xec>)
 800087a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <ButtonMatrixRead+0xe4>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <ButtonMatrixRead+0xec>)
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4413      	add	r3, r2
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	f000 fc31 	bl	80010f4 <HAL_GPIO_WritePin>
	//set nextL to low
	uint8_t nextX = (X + 1) % 4;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <ButtonMatrixRead+0xe4>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	425a      	negs	r2, r3
 800089a:	f003 0303 	and.w	r3, r3, #3
 800089e:	f002 0203 	and.w	r2, r2, #3
 80008a2:	bf58      	it	pl
 80008a4:	4253      	negpl	r3, r2
 80008a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <ButtonMatrixRead+0xec>)
 80008ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <ButtonMatrixRead+0xec>)
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	4413      	add	r3, r2
 80008b8:	889b      	ldrh	r3, [r3, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	f000 fc19 	bl	80010f4 <HAL_GPIO_WritePin>
	X = nextX;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <ButtonMatrixRead+0xe4>)
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	7013      	strb	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000100 	.word	0x20000100
 80008d8:	200000f8 	.word	0x200000f8
 80008dc:	20000020 	.word	0x20000020

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000922:	f000 fcc7 	bl	80012b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b09e      	sub	sp, #120	; 0x78
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	2254      	movs	r2, #84	; 0x54
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fa43 	bl	8002de0 <memset>
  if(huart->Instance==LPUART1)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <HAL_UART_MspInit+0xa8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d136      	bne.n	80009d2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000964:	2320      	movs	r3, #32
 8000966:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4618      	mov	r0, r3
 8000972:	f001 f9e3 	bl	8001d3c <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800097c:	f7ff ffb0 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0xac>)
 8000982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000984:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0xac>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0xac>)
 800098e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0xac>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_UART_MspInit+0xac>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_UART_MspInit+0xac>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009b0:	230c      	movs	r3, #12
 80009b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009c0:	230c      	movs	r3, #12
 80009c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009c8:	4619      	mov	r1, r3
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f000 f9f7 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3778      	adds	r7, #120	; 0x78
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40008000 	.word	0x40008000
 80009e0:	40021000 	.word	0x40021000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f898 	bl	8000b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a40:	f000 fb70 	bl	8001124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a96:	f7ff ffd7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f002 f9a9 	bl	8002df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fd39 	bl	8000514 <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   r0, =_estack
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000ab0:	08002ea0 	.word	0x08002ea0
  ldr r2, =_sbss
 8000ab4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000ab8:	20000108 	.word	0x20000108

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>

08000abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f939 	bl	8000d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f80e 	bl	8000af0 <HAL_InitTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e001      	b.n	8000ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae0:	f7ff ff04 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_InitTick+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d022      	beq.n	8000b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_InitTick+0x6c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_InitTick+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f944 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10f      	bne.n	8000b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	d809      	bhi.n	8000b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b32:	f000 f910 	bl	8000d56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_InitTick+0x70>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e007      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e004      	b.n	8000b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e001      	b.n	8000b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000048 	.word	0x20000048
 8000b5c:	20000040 	.word	0x20000040
 8000b60:	20000044 	.word	0x20000044

08000b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_IncTick+0x1c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <HAL_IncTick+0x1c>)
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000104 	.word	0x20000104
 8000b84:	20000048 	.word	0x20000048

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000104 	.word	0x20000104

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d0c:	d301      	bcc.n	8000d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00f      	b.n	8000d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <SysTick_Config+0x40>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f7ff ff8e 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <SysTick_Config+0x40>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <SysTick_Config+0x40>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ff29 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff40 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff90 	bl	8000c94 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5f 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff33 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffa4 	bl	8000cfc <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dce:	e15a      	b.n	8001086 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 814c 	beq.w	8001080 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	f003 0201 	and.w	r2, r3, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d017      	beq.n	8000e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	6939      	ldr	r1, [r7, #16]
 8000eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0203 	and.w	r2, r3, #3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 80a6 	beq.w	8001080 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	4b5b      	ldr	r3, [pc, #364]	; (80010a4 <HAL_GPIO_Init+0x2e4>)
 8000f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f38:	4a5a      	ldr	r2, [pc, #360]	; (80010a4 <HAL_GPIO_Init+0x2e4>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f40:	4b58      	ldr	r3, [pc, #352]	; (80010a4 <HAL_GPIO_Init+0x2e4>)
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4c:	4a56      	ldr	r2, [pc, #344]	; (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f76:	d01f      	beq.n	8000fb8 <HAL_GPIO_Init+0x1f8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a4c      	ldr	r2, [pc, #304]	; (80010ac <HAL_GPIO_Init+0x2ec>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d019      	beq.n	8000fb4 <HAL_GPIO_Init+0x1f4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <HAL_GPIO_Init+0x2f0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d013      	beq.n	8000fb0 <HAL_GPIO_Init+0x1f0>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4a      	ldr	r2, [pc, #296]	; (80010b4 <HAL_GPIO_Init+0x2f4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d00d      	beq.n	8000fac <HAL_GPIO_Init+0x1ec>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <HAL_GPIO_Init+0x2f8>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d007      	beq.n	8000fa8 <HAL_GPIO_Init+0x1e8>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2fc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d101      	bne.n	8000fa4 <HAL_GPIO_Init+0x1e4>
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	e00a      	b.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	e008      	b.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000fa8:	2304      	movs	r3, #4
 8000faa:	e006      	b.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000fac:	2303      	movs	r3, #3
 8000fae:	e004      	b.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e002      	b.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <HAL_GPIO_Init+0x1fa>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fca:	4937      	ldr	r1, [pc, #220]	; (80010a8 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ffc:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001026:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <HAL_GPIO_Init+0x300>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001050:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x300>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_GPIO_Init+0x300>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	f47f ae9d 	bne.w	8000dd0 <HAL_GPIO_Init+0x10>
  }
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010000 	.word	0x40010000
 80010ac:	48000400 	.word	0x48000400
 80010b0:	48000800 	.word	0x48000800
 80010b4:	48000c00 	.word	0x48000c00
 80010b8:	48001000 	.word	0x48001000
 80010bc:	48001400 	.word	0x48001400
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001110:	e002      	b.n	8001118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f806 	bl	8001154 <HAL_GPIO_EXTI_Callback>
  }
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d141      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800117a:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001186:	d131      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001188:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800118e:	4a46      	ldr	r2, [pc, #280]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a0:	4a41      	ldr	r2, [pc, #260]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011a8:	4b40      	ldr	r3, [pc, #256]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2232      	movs	r2, #50	; 0x32
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	3301      	adds	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011be:	e002      	b.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d2:	d102      	bne.n	80011da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f2      	bne.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e6:	d158      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e057      	b.n	800129c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011f2:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011fc:	e04d      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001204:	d141      	bne.n	800128a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d131      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800122c:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2232      	movs	r2, #50	; 0x32
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	3301      	adds	r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800124a:	e002      	b.n	8001252 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3b01      	subs	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125e:	d102      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f2      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001272:	d112      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e011      	b.n	800129c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001284:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001288:	e007      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001298:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40007000 	.word	0x40007000
 80012ac:	20000040 	.word	0x20000040
 80012b0:	431bde83 	.word	0x431bde83

080012b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c2:	6093      	str	r3, [r2, #8]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40007000 	.word	0x40007000

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e306      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d075      	beq.n	80013de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012f2:	4b97      	ldr	r3, [pc, #604]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012fc:	4b94      	ldr	r3, [pc, #592]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b0c      	cmp	r3, #12
 800130a:	d102      	bne.n	8001312 <HAL_RCC_OscConfig+0x3e>
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d002      	beq.n	8001318 <HAL_RCC_OscConfig+0x44>
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d10b      	bne.n	8001330 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	4b8d      	ldr	r3, [pc, #564]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d05b      	beq.n	80013dc <HAL_RCC_OscConfig+0x108>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d157      	bne.n	80013dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e2e1      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001338:	d106      	bne.n	8001348 <HAL_RCC_OscConfig+0x74>
 800133a:	4b85      	ldr	r3, [pc, #532]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a84      	ldr	r2, [pc, #528]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xb0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x98>
 8001352:	4b7f      	ldr	r3, [pc, #508]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a7e      	ldr	r2, [pc, #504]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b7c      	ldr	r3, [pc, #496]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7b      	ldr	r2, [pc, #492]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xb0>
 800136c:	4b78      	ldr	r3, [pc, #480]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a77      	ldr	r2, [pc, #476]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b75      	ldr	r3, [pc, #468]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a74      	ldr	r2, [pc, #464]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fbfc 	bl	8000b88 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fbf8 	bl	8000b88 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e2a6      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013a6:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xc0>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fbe8 	bl	8000b88 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fbe4 	bl	8000b88 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e292      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ce:	4b60      	ldr	r3, [pc, #384]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0xe8>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d075      	beq.n	80014d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b0c      	cmp	r3, #12
 8001402:	d102      	bne.n	800140a <HAL_RCC_OscConfig+0x136>
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d002      	beq.n	8001410 <HAL_RCC_OscConfig+0x13c>
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	2b04      	cmp	r3, #4
 800140e:	d11f      	bne.n	8001450 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_OscConfig+0x154>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e265      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b49      	ldr	r3, [pc, #292]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	061b      	lsls	r3, r3, #24
 8001436:	4946      	ldr	r1, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800143c:	4b45      	ldr	r3, [pc, #276]	; (8001554 <HAL_RCC_OscConfig+0x280>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fb55 	bl	8000af0 <HAL_InitTick>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d043      	beq.n	80014d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e251      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d023      	beq.n	80014a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a3c      	ldr	r2, [pc, #240]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800145e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fb90 	bl	8000b88 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fb8c 	bl	8000b88 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e23a      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800147e:	4b34      	ldr	r3, [pc, #208]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148a:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	061b      	lsls	r3, r3, #24
 8001498:	492d      	ldr	r1, [pc, #180]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
 800149e:	e01a      	b.n	80014d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80014a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb6c 	bl	8000b88 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fb68 	bl	8000b88 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e216      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1e0>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d041      	beq.n	8001566 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01c      	beq.n	8001524 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb45 	bl	8000b88 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fb41 	bl	8000b88 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1ef      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0ef      	beq.n	8001502 <HAL_RCC_OscConfig+0x22e>
 8001522:	e020      	b.n	8001566 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 8001526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_RCC_OscConfig+0x27c>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fb28 	bl	8000b88 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800153a:	e00d      	b.n	8001558 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fb24 	bl	8000b88 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d906      	bls.n	8001558 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e1d2      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001558:	4b8c      	ldr	r3, [pc, #560]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800155a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ea      	bne.n	800153c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80a6 	beq.w	80016c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001578:	4b84      	ldr	r3, [pc, #528]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800157a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x2b4>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_RCC_OscConfig+0x2b6>
 8001588:	2300      	movs	r3, #0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00d      	beq.n	80015aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b7f      	ldr	r3, [pc, #508]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	4a7e      	ldr	r2, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6593      	str	r3, [r2, #88]	; 0x58
 800159a:	4b7c      	ldr	r3, [pc, #496]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015a6:	2301      	movs	r3, #1
 80015a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015aa:	4b79      	ldr	r3, [pc, #484]	; (8001790 <HAL_RCC_OscConfig+0x4bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d118      	bne.n	80015e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015b6:	4b76      	ldr	r3, [pc, #472]	; (8001790 <HAL_RCC_OscConfig+0x4bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a75      	ldr	r2, [pc, #468]	; (8001790 <HAL_RCC_OscConfig+0x4bc>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff fae1 	bl	8000b88 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff fadd 	bl	8000b88 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e18b      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015dc:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <HAL_RCC_OscConfig+0x4bc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_RCC_OscConfig+0x32e>
 80015f0:	4b66      	ldr	r3, [pc, #408]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 80015f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f6:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001600:	e024      	b.n	800164c <HAL_RCC_OscConfig+0x378>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b05      	cmp	r3, #5
 8001608:	d110      	bne.n	800162c <HAL_RCC_OscConfig+0x358>
 800160a:	4b60      	ldr	r3, [pc, #384]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800160c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001610:	4a5e      	ldr	r2, [pc, #376]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800161a:	4b5c      	ldr	r3, [pc, #368]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800161c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001620:	4a5a      	ldr	r2, [pc, #360]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162a:	e00f      	b.n	800164c <HAL_RCC_OscConfig+0x378>
 800162c:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	4a56      	ldr	r2, [pc, #344]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001642:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d016      	beq.n	8001682 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fa98 	bl	8000b88 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff fa94 	bl	8000b88 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e140      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001672:	4b46      	ldr	r3, [pc, #280]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ed      	beq.n	800165c <HAL_RCC_OscConfig+0x388>
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff fa81 	bl	8000b88 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fa7d 	bl	8000b88 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e129      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a0:	4b3a      	ldr	r3, [pc, #232]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ed      	bne.n	800168a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016ae:	7ffb      	ldrb	r3, [r7, #31]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	4a34      	ldr	r2, [pc, #208]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 80016ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d03c      	beq.n	8001746 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01c      	beq.n	800170e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016d4:	4b2d      	ldr	r3, [pc, #180]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016da:	4a2c      	ldr	r2, [pc, #176]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fa50 	bl	8000b88 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ec:	f7ff fa4c 	bl	8000b88 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0fa      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ef      	beq.n	80016ec <HAL_RCC_OscConfig+0x418>
 800170c:	e01b      	b.n	8001746 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff fa33 	bl	8000b88 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001726:	f7ff fa2f 	bl	8000b88 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0dd      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800173a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ef      	bne.n	8001726 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80d1 	beq.w	80018f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b0c      	cmp	r3, #12
 800175a:	f000 808b 	beq.w	8001874 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d15e      	bne.n	8001824 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_RCC_OscConfig+0x4b8>)
 800176c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fa09 	bl	8000b88 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	e00c      	b.n	8001794 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fa05 	bl	8000b88 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d905      	bls.n	8001794 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0b3      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
 800178c:	40021000 	.word	0x40021000
 8001790:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ec      	bne.n	800177a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a0:	4b56      	ldr	r3, [pc, #344]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_RCC_OscConfig+0x62c>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6a11      	ldr	r1, [r2, #32]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017b0:	3a01      	subs	r2, #1
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	4311      	orrs	r1, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017ba:	0212      	lsls	r2, r2, #8
 80017bc:	4311      	orrs	r1, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017c2:	0852      	lsrs	r2, r2, #1
 80017c4:	3a01      	subs	r2, #1
 80017c6:	0552      	lsls	r2, r2, #21
 80017c8:	4311      	orrs	r1, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017ce:	0852      	lsrs	r2, r2, #1
 80017d0:	3a01      	subs	r2, #1
 80017d2:	0652      	lsls	r2, r2, #25
 80017d4:	4311      	orrs	r1, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017da:	06d2      	lsls	r2, r2, #27
 80017dc:	430a      	orrs	r2, r1
 80017de:	4947      	ldr	r1, [pc, #284]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b45      	ldr	r3, [pc, #276]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a44      	ldr	r2, [pc, #272]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f0:	4b42      	ldr	r3, [pc, #264]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4a41      	ldr	r2, [pc, #260]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 80017f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff f9c4 	bl	8000b88 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff f9c0 	bl	8000b88 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e06e      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x530>
 8001822:	e066      	b.n	80018f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a34      	ldr	r2, [pc, #208]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 800182a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800182e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a31      	ldr	r2, [pc, #196]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4a2e      	ldr	r2, [pc, #184]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 8001842:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f99c 	bl	8000b88 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f998 	bl	8000b88 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e046      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x580>
 8001872:	e03e      	b.n	80018f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e039      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_RCC_OscConfig+0x628>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	429a      	cmp	r2, r3
 8001892:	d12c      	bne.n	80018ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	3b01      	subs	r3, #1
 80018a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d123      	bne.n	80018ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d11b      	bne.n	80018ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d113      	bne.n	80018ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	3b01      	subs	r3, #1
 80018d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d109      	bne.n	80018ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	085b      	lsrs	r3, r3, #1
 80018e6:	3b01      	subs	r3, #1
 80018e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	019f800c 	.word	0x019f800c

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e11e      	b.n	8001b5a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b91      	ldr	r3, [pc, #580]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d910      	bls.n	800194c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b8e      	ldr	r3, [pc, #568]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 020f 	bic.w	r2, r3, #15
 8001932:	498c      	ldr	r1, [pc, #560]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b8a      	ldr	r3, [pc, #552]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e106      	b.n	8001b5a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d073      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d129      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001960:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0f4      	b.n	8001b5a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001970:	f000 f99e 	bl	8001cb0 <RCC_GetSysClockFreqFromPLLSource>
 8001974:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4a7c      	ldr	r2, [pc, #496]	; (8001b6c <HAL_RCC_ClockConfig+0x268>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d93f      	bls.n	80019fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800197e:	4b7a      	ldr	r3, [pc, #488]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001992:	2b00      	cmp	r3, #0
 8001994:	d033      	beq.n	80019fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800199a:	2b00      	cmp	r3, #0
 800199c:	d12f      	bne.n	80019fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a6:	4a70      	ldr	r2, [pc, #448]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e024      	b.n	80019fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d107      	bne.n	80019cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019bc:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d109      	bne.n	80019dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0c6      	b.n	8001b5a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019cc:	4b66      	ldr	r3, [pc, #408]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0be      	b.n	8001b5a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019dc:	f000 f8ce 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4a61      	ldr	r2, [pc, #388]	; (8001b6c <HAL_RCC_ClockConfig+0x268>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d909      	bls.n	80019fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f2:	4a5d      	ldr	r2, [pc, #372]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4957      	ldr	r1, [pc, #348]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a10:	f7ff f8ba 	bl	8000b88 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff f8b6 	bl	8000b88 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e095      	b.n	8001b5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b4e      	ldr	r3, [pc, #312]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 020c 	and.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1eb      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d023      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a58:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a42      	ldr	r2, [pc, #264]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a62:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a78:	4a3b      	ldr	r2, [pc, #236]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4936      	ldr	r1, [pc, #216]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2b80      	cmp	r3, #128	; 0x80
 8001a98:	d105      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aa4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d21d      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 020f 	bic.w	r2, r3, #15
 8001abc:	4929      	ldr	r1, [pc, #164]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f860 	bl	8000b88 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f85c 	bl	8000b88 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e03b      	b.n	8001b5a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_RCC_ClockConfig+0x260>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1ed      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4917      	ldr	r1, [pc, #92]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490f      	ldr	r1, [pc, #60]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b2e:	f000 f825 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_ClockConfig+0x264>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490c      	ldr	r1, [pc, #48]	; (8001b70 <HAL_RCC_ClockConfig+0x26c>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	f003 031f 	and.w	r3, r3, #31
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x270>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x274>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe ffcc 	bl	8000af0 <HAL_InitTick>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	04c4b400 	.word	0x04c4b400
 8001b70:	08002e50 	.word	0x08002e50
 8001b74:	20000040 	.word	0x20000040
 8001b78:	20000044 	.word	0x20000044

08001b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d102      	bne.n	8001b94 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	e047      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d102      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba0:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	e03e      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d136      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd0:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bda:	68d2      	ldr	r2, [r2, #12]
 8001bdc:	0a12      	lsrs	r2, r2, #8
 8001bde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
      break;
 8001be8:	e00c      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bea:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf4:	68d2      	ldr	r2, [r2, #12]
 8001bf6:	0a12      	lsrs	r2, r2, #8
 8001bf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bfc:	fb02 f303 	mul.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
      break;
 8001c02:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0e5b      	lsrs	r3, r3, #25
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e001      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c24:	693b      	ldr	r3, [r7, #16]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	016e3600 	.word	0x016e3600

08001c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000040 	.word	0x20000040

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c5c:	f7ff fff0 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4904      	ldr	r1, [pc, #16]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08002e60 	.word	0x08002e60

08001c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c88:	f7ff ffda 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0adb      	lsrs	r3, r3, #11
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4904      	ldr	r1, [pc, #16]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08002e60 	.word	0x08002e60

08001cb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d10c      	bne.n	8001cee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cd4:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cde:	68d2      	ldr	r2, [r2, #12]
 8001ce0:	0a12      	lsrs	r2, r2, #8
 8001ce2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	617b      	str	r3, [r7, #20]
    break;
 8001cec:	e00c      	b.n	8001d08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cf8:	68d2      	ldr	r2, [r2, #12]
 8001cfa:	0a12      	lsrs	r2, r2, #8
 8001cfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d00:	fb02 f303 	mul.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    break;
 8001d06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0e5b      	lsrs	r3, r3, #25
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	3301      	adds	r3, #1
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d22:	687b      	ldr	r3, [r7, #4]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	016e3600 	.word	0x016e3600
 8001d38:	00f42400 	.word	0x00f42400

08001d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d44:	2300      	movs	r3, #0
 8001d46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d48:	2300      	movs	r3, #0
 8001d4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8098 	beq.w	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6593      	str	r3, [r2, #88]	; 0x58
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a39      	ldr	r2, [pc, #228]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d92:	f7fe fef9 	bl	8000b88 <HAL_GetTick>
 8001d96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d98:	e009      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7fe fef5 	bl	8000b88 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d902      	bls.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	74fb      	strb	r3, [r7, #19]
        break;
 8001dac:	e005      	b.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dae:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0ef      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dba:	7cfb      	ldrb	r3, [r7, #19]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d159      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d01e      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d019      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e08:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d016      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f7fe feb5 	bl	8000b88 <HAL_GetTick>
 8001e1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e20:	e00b      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe feb1 	bl	8000b88 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d902      	bls.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	74fb      	strb	r3, [r7, #19]
            break;
 8001e38:	e006      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ec      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10b      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e64:	e008      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e66:	7cfb      	ldrb	r3, [r7, #19]
 8001e68:	74bb      	strb	r3, [r7, #18]
 8001e6a:	e005      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e78:	7c7b      	ldrb	r3, [r7, #17]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4ba7      	ldr	r3, [pc, #668]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4aa6      	ldr	r2, [pc, #664]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e96:	4ba1      	ldr	r3, [pc, #644]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9c:	f023 0203 	bic.w	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	499d      	ldr	r1, [pc, #628]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb8:	4b98      	ldr	r3, [pc, #608]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f023 020c 	bic.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	4995      	ldr	r1, [pc, #596]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eda:	4b90      	ldr	r3, [pc, #576]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	498c      	ldr	r1, [pc, #560]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001efc:	4b87      	ldr	r3, [pc, #540]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	4984      	ldr	r1, [pc, #528]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	497b      	ldr	r1, [pc, #492]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f40:	4b76      	ldr	r3, [pc, #472]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	4973      	ldr	r1, [pc, #460]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f62:	4b6e      	ldr	r3, [pc, #440]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	496a      	ldr	r1, [pc, #424]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f84:	4b65      	ldr	r3, [pc, #404]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4962      	ldr	r1, [pc, #392]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	4959      	ldr	r1, [pc, #356]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fc8:	4b54      	ldr	r3, [pc, #336]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	4951      	ldr	r1, [pc, #324]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fea:	4b4c      	ldr	r3, [pc, #304]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	4948      	ldr	r1, [pc, #288]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d015      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800200c:	4b43      	ldr	r3, [pc, #268]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4940      	ldr	r1, [pc, #256]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800202a:	d105      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800202c:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a3a      	ldr	r2, [pc, #232]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002036:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002052:	4932      	ldr	r1, [pc, #200]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002062:	d105      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a2c      	ldr	r2, [pc, #176]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d015      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208a:	4924      	ldr	r1, [pc, #144]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209a:	d105      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a1e      	ldr	r2, [pc, #120]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d015      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c2:	4916      	ldr	r1, [pc, #88]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020d2:	d105      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d019      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800210a:	d109      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a02      	ldr	r2, [pc, #8]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002116:	60d3      	str	r3, [r2, #12]
 8002118:	e002      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4926      	ldr	r1, [pc, #152]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800214a:	d105      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d015      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002172:	4918      	ldr	r1, [pc, #96]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002182:	d105      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800219e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	490a      	ldr	r1, [pc, #40]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ba:	d105      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000

080021d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e042      	b.n	8002270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7fe fb99 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2224      	movs	r2, #36	; 0x24
 8002206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f82c 	bl	8002278 <UART_SetConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e022      	b.n	8002270 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fb1c 	bl	8002870 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fba3 	bl	80029b4 <UART_CheckIdleState>
 800226e:	4603      	mov	r3, r0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800227c:	b08c      	sub	sp, #48	; 0x30
 800227e:	af00      	add	r7, sp, #0
 8002280:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	431a      	orrs	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	4313      	orrs	r3, r2
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4baa      	ldr	r3, [pc, #680]	; (8002550 <UART_SetConfig+0x2d8>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a9f      	ldr	r2, [pc, #636]	; (8002554 <UART_SetConfig+0x2dc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e0:	4313      	orrs	r3, r2
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80022ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022f8:	430b      	orrs	r3, r1
 80022fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f023 010f 	bic.w	r1, r3, #15
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a90      	ldr	r2, [pc, #576]	; (8002558 <UART_SetConfig+0x2e0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d125      	bne.n	8002368 <UART_SetConfig+0xf0>
 800231c:	4b8f      	ldr	r3, [pc, #572]	; (800255c <UART_SetConfig+0x2e4>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b03      	cmp	r3, #3
 8002328:	d81a      	bhi.n	8002360 <UART_SetConfig+0xe8>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <UART_SetConfig+0xb8>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002351 	.word	0x08002351
 8002338:	08002349 	.word	0x08002349
 800233c:	08002359 	.word	0x08002359
 8002340:	2301      	movs	r3, #1
 8002342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002346:	e116      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002348:	2302      	movs	r3, #2
 800234a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800234e:	e112      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002350:	2304      	movs	r3, #4
 8002352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002356:	e10e      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002358:	2308      	movs	r3, #8
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800235e:	e10a      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002360:	2310      	movs	r3, #16
 8002362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002366:	e106      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a7c      	ldr	r2, [pc, #496]	; (8002560 <UART_SetConfig+0x2e8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d138      	bne.n	80023e4 <UART_SetConfig+0x16c>
 8002372:	4b7a      	ldr	r3, [pc, #488]	; (800255c <UART_SetConfig+0x2e4>)
 8002374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b0c      	cmp	r3, #12
 800237e:	d82d      	bhi.n	80023dc <UART_SetConfig+0x164>
 8002380:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <UART_SetConfig+0x110>)
 8002382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002386:	bf00      	nop
 8002388:	080023bd 	.word	0x080023bd
 800238c:	080023dd 	.word	0x080023dd
 8002390:	080023dd 	.word	0x080023dd
 8002394:	080023dd 	.word	0x080023dd
 8002398:	080023cd 	.word	0x080023cd
 800239c:	080023dd 	.word	0x080023dd
 80023a0:	080023dd 	.word	0x080023dd
 80023a4:	080023dd 	.word	0x080023dd
 80023a8:	080023c5 	.word	0x080023c5
 80023ac:	080023dd 	.word	0x080023dd
 80023b0:	080023dd 	.word	0x080023dd
 80023b4:	080023dd 	.word	0x080023dd
 80023b8:	080023d5 	.word	0x080023d5
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023c2:	e0d8      	b.n	8002576 <UART_SetConfig+0x2fe>
 80023c4:	2302      	movs	r3, #2
 80023c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ca:	e0d4      	b.n	8002576 <UART_SetConfig+0x2fe>
 80023cc:	2304      	movs	r3, #4
 80023ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023d2:	e0d0      	b.n	8002576 <UART_SetConfig+0x2fe>
 80023d4:	2308      	movs	r3, #8
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023da:	e0cc      	b.n	8002576 <UART_SetConfig+0x2fe>
 80023dc:	2310      	movs	r3, #16
 80023de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023e2:	e0c8      	b.n	8002576 <UART_SetConfig+0x2fe>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a5e      	ldr	r2, [pc, #376]	; (8002564 <UART_SetConfig+0x2ec>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d125      	bne.n	800243a <UART_SetConfig+0x1c2>
 80023ee:	4b5b      	ldr	r3, [pc, #364]	; (800255c <UART_SetConfig+0x2e4>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023f8:	2b30      	cmp	r3, #48	; 0x30
 80023fa:	d016      	beq.n	800242a <UART_SetConfig+0x1b2>
 80023fc:	2b30      	cmp	r3, #48	; 0x30
 80023fe:	d818      	bhi.n	8002432 <UART_SetConfig+0x1ba>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d00a      	beq.n	800241a <UART_SetConfig+0x1a2>
 8002404:	2b20      	cmp	r3, #32
 8002406:	d814      	bhi.n	8002432 <UART_SetConfig+0x1ba>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <UART_SetConfig+0x19a>
 800240c:	2b10      	cmp	r3, #16
 800240e:	d008      	beq.n	8002422 <UART_SetConfig+0x1aa>
 8002410:	e00f      	b.n	8002432 <UART_SetConfig+0x1ba>
 8002412:	2300      	movs	r3, #0
 8002414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002418:	e0ad      	b.n	8002576 <UART_SetConfig+0x2fe>
 800241a:	2302      	movs	r3, #2
 800241c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002420:	e0a9      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002422:	2304      	movs	r3, #4
 8002424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002428:	e0a5      	b.n	8002576 <UART_SetConfig+0x2fe>
 800242a:	2308      	movs	r3, #8
 800242c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002430:	e0a1      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002432:	2310      	movs	r3, #16
 8002434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002438:	e09d      	b.n	8002576 <UART_SetConfig+0x2fe>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4a      	ldr	r2, [pc, #296]	; (8002568 <UART_SetConfig+0x2f0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d125      	bne.n	8002490 <UART_SetConfig+0x218>
 8002444:	4b45      	ldr	r3, [pc, #276]	; (800255c <UART_SetConfig+0x2e4>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800244e:	2bc0      	cmp	r3, #192	; 0xc0
 8002450:	d016      	beq.n	8002480 <UART_SetConfig+0x208>
 8002452:	2bc0      	cmp	r3, #192	; 0xc0
 8002454:	d818      	bhi.n	8002488 <UART_SetConfig+0x210>
 8002456:	2b80      	cmp	r3, #128	; 0x80
 8002458:	d00a      	beq.n	8002470 <UART_SetConfig+0x1f8>
 800245a:	2b80      	cmp	r3, #128	; 0x80
 800245c:	d814      	bhi.n	8002488 <UART_SetConfig+0x210>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <UART_SetConfig+0x1f0>
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d008      	beq.n	8002478 <UART_SetConfig+0x200>
 8002466:	e00f      	b.n	8002488 <UART_SetConfig+0x210>
 8002468:	2300      	movs	r3, #0
 800246a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800246e:	e082      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002470:	2302      	movs	r3, #2
 8002472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002476:	e07e      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002478:	2304      	movs	r3, #4
 800247a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800247e:	e07a      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002480:	2308      	movs	r3, #8
 8002482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002486:	e076      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002488:	2310      	movs	r3, #16
 800248a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800248e:	e072      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a35      	ldr	r2, [pc, #212]	; (800256c <UART_SetConfig+0x2f4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d12a      	bne.n	80024f0 <UART_SetConfig+0x278>
 800249a:	4b30      	ldr	r3, [pc, #192]	; (800255c <UART_SetConfig+0x2e4>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024a8:	d01a      	beq.n	80024e0 <UART_SetConfig+0x268>
 80024aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ae:	d81b      	bhi.n	80024e8 <UART_SetConfig+0x270>
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d00c      	beq.n	80024d0 <UART_SetConfig+0x258>
 80024b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ba:	d815      	bhi.n	80024e8 <UART_SetConfig+0x270>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <UART_SetConfig+0x250>
 80024c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c4:	d008      	beq.n	80024d8 <UART_SetConfig+0x260>
 80024c6:	e00f      	b.n	80024e8 <UART_SetConfig+0x270>
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024ce:	e052      	b.n	8002576 <UART_SetConfig+0x2fe>
 80024d0:	2302      	movs	r3, #2
 80024d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024d6:	e04e      	b.n	8002576 <UART_SetConfig+0x2fe>
 80024d8:	2304      	movs	r3, #4
 80024da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024de:	e04a      	b.n	8002576 <UART_SetConfig+0x2fe>
 80024e0:	2308      	movs	r3, #8
 80024e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024e6:	e046      	b.n	8002576 <UART_SetConfig+0x2fe>
 80024e8:	2310      	movs	r3, #16
 80024ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024ee:	e042      	b.n	8002576 <UART_SetConfig+0x2fe>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <UART_SetConfig+0x2dc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d13a      	bne.n	8002570 <UART_SetConfig+0x2f8>
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <UART_SetConfig+0x2e4>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002508:	d01a      	beq.n	8002540 <UART_SetConfig+0x2c8>
 800250a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800250e:	d81b      	bhi.n	8002548 <UART_SetConfig+0x2d0>
 8002510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002514:	d00c      	beq.n	8002530 <UART_SetConfig+0x2b8>
 8002516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251a:	d815      	bhi.n	8002548 <UART_SetConfig+0x2d0>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <UART_SetConfig+0x2b0>
 8002520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002524:	d008      	beq.n	8002538 <UART_SetConfig+0x2c0>
 8002526:	e00f      	b.n	8002548 <UART_SetConfig+0x2d0>
 8002528:	2300      	movs	r3, #0
 800252a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800252e:	e022      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002530:	2302      	movs	r3, #2
 8002532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002536:	e01e      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002538:	2304      	movs	r3, #4
 800253a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800253e:	e01a      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002540:	2308      	movs	r3, #8
 8002542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002546:	e016      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002548:	2310      	movs	r3, #16
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800254e:	e012      	b.n	8002576 <UART_SetConfig+0x2fe>
 8002550:	cfff69f3 	.word	0xcfff69f3
 8002554:	40008000 	.word	0x40008000
 8002558:	40013800 	.word	0x40013800
 800255c:	40021000 	.word	0x40021000
 8002560:	40004400 	.word	0x40004400
 8002564:	40004800 	.word	0x40004800
 8002568:	40004c00 	.word	0x40004c00
 800256c:	40005000 	.word	0x40005000
 8002570:	2310      	movs	r3, #16
 8002572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4aae      	ldr	r2, [pc, #696]	; (8002834 <UART_SetConfig+0x5bc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	f040 8097 	bne.w	80026b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002586:	2b08      	cmp	r3, #8
 8002588:	d823      	bhi.n	80025d2 <UART_SetConfig+0x35a>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <UART_SetConfig+0x318>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025b5 	.word	0x080025b5
 8002594:	080025d3 	.word	0x080025d3
 8002598:	080025bd 	.word	0x080025bd
 800259c:	080025d3 	.word	0x080025d3
 80025a0:	080025c3 	.word	0x080025c3
 80025a4:	080025d3 	.word	0x080025d3
 80025a8:	080025d3 	.word	0x080025d3
 80025ac:	080025d3 	.word	0x080025d3
 80025b0:	080025cb 	.word	0x080025cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b4:	f7ff fb50 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025ba:	e010      	b.n	80025de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025bc:	4b9e      	ldr	r3, [pc, #632]	; (8002838 <UART_SetConfig+0x5c0>)
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025c0:	e00d      	b.n	80025de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025c2:	f7ff fadb 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 80025c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025c8:	e009      	b.n	80025de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025d0:	e005      	b.n	80025de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80025dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8130 	beq.w	8002846 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	4a94      	ldr	r2, [pc, #592]	; (800283c <UART_SetConfig+0x5c4>)
 80025ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f0:	461a      	mov	r2, r3
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	429a      	cmp	r2, r3
 8002608:	d305      	bcc.n	8002616 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	429a      	cmp	r2, r3
 8002614:	d903      	bls.n	800261e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800261c:	e113      	b.n	8002846 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	2200      	movs	r2, #0
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	60fa      	str	r2, [r7, #12]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	4a84      	ldr	r2, [pc, #528]	; (800283c <UART_SetConfig+0x5c4>)
 800262c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002630:	b29b      	uxth	r3, r3
 8002632:	2200      	movs	r2, #0
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800263c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002640:	f7fd fdea 	bl	8000218 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	020b      	lsls	r3, r1, #8
 8002656:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800265a:	0202      	lsls	r2, r0, #8
 800265c:	6979      	ldr	r1, [r7, #20]
 800265e:	6849      	ldr	r1, [r1, #4]
 8002660:	0849      	lsrs	r1, r1, #1
 8002662:	2000      	movs	r0, #0
 8002664:	460c      	mov	r4, r1
 8002666:	4605      	mov	r5, r0
 8002668:	eb12 0804 	adds.w	r8, r2, r4
 800266c:	eb43 0905 	adc.w	r9, r3, r5
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	469a      	mov	sl, r3
 8002678:	4693      	mov	fp, r2
 800267a:	4652      	mov	r2, sl
 800267c:	465b      	mov	r3, fp
 800267e:	4640      	mov	r0, r8
 8002680:	4649      	mov	r1, r9
 8002682:	f7fd fdc9 	bl	8000218 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4613      	mov	r3, r2
 800268c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002694:	d308      	bcc.n	80026a8 <UART_SetConfig+0x430>
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800269c:	d204      	bcs.n	80026a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	e0ce      	b.n	8002846 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80026ae:	e0ca      	b.n	8002846 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b8:	d166      	bne.n	8002788 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80026ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d827      	bhi.n	8002712 <UART_SetConfig+0x49a>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <UART_SetConfig+0x450>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	080026ed 	.word	0x080026ed
 80026cc:	080026f5 	.word	0x080026f5
 80026d0:	080026fd 	.word	0x080026fd
 80026d4:	08002713 	.word	0x08002713
 80026d8:	08002703 	.word	0x08002703
 80026dc:	08002713 	.word	0x08002713
 80026e0:	08002713 	.word	0x08002713
 80026e4:	08002713 	.word	0x08002713
 80026e8:	0800270b 	.word	0x0800270b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ec:	f7ff fab4 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80026f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026f2:	e014      	b.n	800271e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026f4:	f7ff fac6 	bl	8001c84 <HAL_RCC_GetPCLK2Freq>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80026fa:	e010      	b.n	800271e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026fc:	4b4e      	ldr	r3, [pc, #312]	; (8002838 <UART_SetConfig+0x5c0>)
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002700:	e00d      	b.n	800271e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002702:	f7ff fa3b 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 8002706:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002708:	e009      	b.n	800271e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002710:	e005      	b.n	800271e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800271c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8090 	beq.w	8002846 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	4a44      	ldr	r2, [pc, #272]	; (800283c <UART_SetConfig+0x5c4>)
 800272c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002730:	461a      	mov	r2, r3
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	fbb3 f3f2 	udiv	r3, r3, r2
 8002738:	005a      	lsls	r2, r3, #1
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	441a      	add	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	d916      	bls.n	8002780 <UART_SetConfig+0x508>
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d212      	bcs.n	8002780 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	b29b      	uxth	r3, r3
 800275e:	f023 030f 	bic.w	r3, r3, #15
 8002762:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	b29b      	uxth	r3, r3
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	b29a      	uxth	r2, r3
 8002770:	8bfb      	ldrh	r3, [r7, #30]
 8002772:	4313      	orrs	r3, r2
 8002774:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	8bfa      	ldrh	r2, [r7, #30]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	e062      	b.n	8002846 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002786:	e05e      	b.n	8002846 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002788:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800278c:	2b08      	cmp	r3, #8
 800278e:	d828      	bhi.n	80027e2 <UART_SetConfig+0x56a>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <UART_SetConfig+0x520>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027bd 	.word	0x080027bd
 800279c:	080027c5 	.word	0x080027c5
 80027a0:	080027cd 	.word	0x080027cd
 80027a4:	080027e3 	.word	0x080027e3
 80027a8:	080027d3 	.word	0x080027d3
 80027ac:	080027e3 	.word	0x080027e3
 80027b0:	080027e3 	.word	0x080027e3
 80027b4:	080027e3 	.word	0x080027e3
 80027b8:	080027db 	.word	0x080027db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027bc:	f7ff fa4c 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 80027c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027c2:	e014      	b.n	80027ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027c4:	f7ff fa5e 	bl	8001c84 <HAL_RCC_GetPCLK2Freq>
 80027c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027ca:	e010      	b.n	80027ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <UART_SetConfig+0x5c0>)
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80027d0:	e00d      	b.n	80027ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027d2:	f7ff f9d3 	bl	8001b7c <HAL_RCC_GetSysClockFreq>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027d8:	e009      	b.n	80027ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80027e0:	e005      	b.n	80027ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80027ec:	bf00      	nop
    }

    if (pclk != 0U)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d028      	beq.n	8002846 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	4a10      	ldr	r2, [pc, #64]	; (800283c <UART_SetConfig+0x5c4>)
 80027fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027fe:	461a      	mov	r2, r3
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	fbb3 f2f2 	udiv	r2, r3, r2
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	441a      	add	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b0f      	cmp	r3, #15
 800281c:	d910      	bls.n	8002840 <UART_SetConfig+0x5c8>
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d20c      	bcs.n	8002840 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	b29a      	uxth	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60da      	str	r2, [r3, #12]
 8002830:	e009      	b.n	8002846 <UART_SetConfig+0x5ce>
 8002832:	bf00      	nop
 8002834:	40008000 	.word	0x40008000
 8002838:	00f42400 	.word	0x00f42400
 800283c:	08002e68 	.word	0x08002e68
      }
      else
      {
        ret = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2201      	movs	r2, #1
 800284a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2201      	movs	r2, #1
 8002852:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2200      	movs	r2, #0
 8002860:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002862:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002866:	4618      	mov	r0, r3
 8002868:	3730      	adds	r7, #48	; 0x30
 800286a:	46bd      	mov	sp, r7
 800286c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01a      	beq.n	8002986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296e:	d10a      	bne.n	8002986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	605a      	str	r2, [r3, #4]
  }
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029c4:	f7fe f8e0 	bl	8000b88 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d10e      	bne.n	80029f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f82f 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e025      	b.n	8002a42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d10e      	bne.n	8002a22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f819 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e00f      	b.n	8002a42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b09c      	sub	sp, #112	; 0x70
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5a:	e0a9      	b.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	f000 80a5 	beq.w	8002bb0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7fe f88f 	bl	8000b88 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <UART_WaitOnFlagUntilTimeout+0x32>
 8002a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d140      	bne.n	8002afe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a90:	667b      	str	r3, [r7, #100]	; 0x64
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002aa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e6      	bne.n	8002a7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3308      	adds	r3, #8
 8002acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ace:	64ba      	str	r2, [r7, #72]	; 0x48
 8002ad0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e069      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d051      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b1a:	d149      	bne.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	e853 3f00 	ldrex	r3, [r3]
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
 8002b46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b4c:	e841 2300 	strex	r3, r2, [r1]
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e6      	bne.n	8002b26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	613b      	str	r3, [r7, #16]
   return(result);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3308      	adds	r3, #8
 8002b76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b78:	623a      	str	r2, [r7, #32]
 8002b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	69f9      	ldr	r1, [r7, #28]
 8002b7e:	6a3a      	ldr	r2, [r7, #32]
 8002b80:	e841 2300 	strex	r3, r2, [r1]
 8002b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e5      	bne.n	8002b58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e010      	b.n	8002bd2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	f43f af46 	beq.w	8002a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3770      	adds	r7, #112	; 0x70
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e027      	b.n	8002c40 <HAL_UARTEx_DisableFifoMode+0x66>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	; 0x24
 8002bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002c1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e02d      	b.n	8002cc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f84f 	bl	8002d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e02d      	b.n	8002d3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f811 	bl	8002d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d64:	e031      	b.n	8002dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d66:	2308      	movs	r3, #8
 8002d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	0e5b      	lsrs	r3, r3, #25
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	0f5b      	lsrs	r3, r3, #29
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d8e:	7bbb      	ldrb	r3, [r7, #14]
 8002d90:	7b3a      	ldrb	r2, [r7, #12]
 8002d92:	4911      	ldr	r1, [pc, #68]	; (8002dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8002d94:	5c8a      	ldrb	r2, [r1, r2]
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d9a:	7b3a      	ldrb	r2, [r7, #12]
 8002d9c:	490f      	ldr	r1, [pc, #60]	; (8002ddc <UARTEx_SetNbDataToProcess+0x98>)
 8002d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	7b7a      	ldrb	r2, [r7, #13]
 8002db0:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8002db2:	5c8a      	ldrb	r2, [r1, r2]
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002db8:	7b7a      	ldrb	r2, [r7, #13]
 8002dba:	4908      	ldr	r1, [pc, #32]	; (8002ddc <UARTEx_SetNbDataToProcess+0x98>)
 8002dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	08002e80 	.word	0x08002e80
 8002ddc:	08002e88 	.word	0x08002e88

08002de0 <memset>:
 8002de0:	4402      	add	r2, r0
 8002de2:	4603      	mov	r3, r0
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d100      	bne.n	8002dea <memset+0xa>
 8002de8:	4770      	bx	lr
 8002dea:	f803 1b01 	strb.w	r1, [r3], #1
 8002dee:	e7f9      	b.n	8002de4 <memset+0x4>

08002df0 <__libc_init_array>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4d0d      	ldr	r5, [pc, #52]	; (8002e28 <__libc_init_array+0x38>)
 8002df4:	4c0d      	ldr	r4, [pc, #52]	; (8002e2c <__libc_init_array+0x3c>)
 8002df6:	1b64      	subs	r4, r4, r5
 8002df8:	10a4      	asrs	r4, r4, #2
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	42a6      	cmp	r6, r4
 8002dfe:	d109      	bne.n	8002e14 <__libc_init_array+0x24>
 8002e00:	4d0b      	ldr	r5, [pc, #44]	; (8002e30 <__libc_init_array+0x40>)
 8002e02:	4c0c      	ldr	r4, [pc, #48]	; (8002e34 <__libc_init_array+0x44>)
 8002e04:	f000 f818 	bl	8002e38 <_init>
 8002e08:	1b64      	subs	r4, r4, r5
 8002e0a:	10a4      	asrs	r4, r4, #2
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	42a6      	cmp	r6, r4
 8002e10:	d105      	bne.n	8002e1e <__libc_init_array+0x2e>
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e18:	4798      	blx	r3
 8002e1a:	3601      	adds	r6, #1
 8002e1c:	e7ee      	b.n	8002dfc <__libc_init_array+0xc>
 8002e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e22:	4798      	blx	r3
 8002e24:	3601      	adds	r6, #1
 8002e26:	e7f2      	b.n	8002e0e <__libc_init_array+0x1e>
 8002e28:	08002e98 	.word	0x08002e98
 8002e2c:	08002e98 	.word	0x08002e98
 8002e30:	08002e98 	.word	0x08002e98
 8002e34:	08002e9c 	.word	0x08002e9c

08002e38 <_init>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	bf00      	nop
 8002e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3e:	bc08      	pop	{r3}
 8002e40:	469e      	mov	lr, r3
 8002e42:	4770      	bx	lr

08002e44 <_fini>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	bf00      	nop
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr
